/* 작업순서를 잘 생각하면서 해보기
1. 시각적으로 보이는 덩어리 지정
2. div나누고 중앙정렬
3. height는 조금만 참자 ^^
4. 나눈 div에서 세부적으로 덩어리 나누기 (box-shadow로 요소들 공간 확인해보기 */
/* div, img 등은 Type selector* => 초기화 해줄때 거의 사용, 각각의 속성을 더해주기 위해서는 상속을 사용하자 */ 



h1, h2, ul, p {
    /*property : value*/
    margin: initial;
    padding: initial;
}
li {
    list-style-type: none;
}
/*img 요소 하단에 생기는 알수 없눈 빈공간 없애주기 초기화*/
img {
    vertical-align: top;
}





body {
    background-image: url(./images/background.gif);
    
    
}


/*
    - background-color의 initial value -> transparent
    - width: auto; <- initial value  width auto는 직계 부모가 제공해주는 contents크기만큼 영역을 가득차게 제공 (padding, marginm border가 다 결정되었을때 고려해서 계산해줌)-> containing block이라 부름 
    - <width: auto와 100%차이 기억하기>
    - margin의 auto값-> 사용가능한 공간을 자동으로 취한다. margin의 initial value는 0 !!
    - margin : 0 auto; => 중간정렬
    - text-align: center; =>wrapper안에 있는 모든 요소들이 center로 옴 text-align의 initial value는 start
*/
.wrapper {
    background: #ddd;
    width: 800px;
    margin: 40px auto;
    
    text-align: center;
    
}



/* height는 컨텐츠영역 높이로 설정하기위해 앞단계에서 설정할 것이 아님 auto일때가 가장 안정적 */
.header {
    background-image: url(images/cover03.png);
    background-size: cover;
    color: white;
    padding: 100px;
}

.header img.profile {
    border: 8px solid white;
    border-radius: 0 40px 40px 0;
    margin-bottom: 30px;
}

/* header와 h1사이의 공백 ->descendant combinator 하위 셀렉터 */
.header h1 { 
    /* box-shadow block 안쪽으로 그림자 생기도록 활용하면 공간차지 확인할때 유용함!!!!! */
    /* box-shadow: inset 0 0 10px lime; */
    /* border에 색상을 주지않으면 currentColor로 주어지는데 부모에게 있는 color 받음 */
    border-bottom: 4px solid;
    width: 200px;
    margin: 30px auto;
}

.header p {
    box-shadow: inset 0 0 10px rgb(138, 193, 224);
    color: white;
}


/* 1.레이아웃 만들기 2. 마크업 추가하기(구체적인 내용 넣기) 3.section에 있는 h2, ul, li 속성 초기화해주기(초기화 하는것들은 제일 위쪽에 추가해서 깔끔하게 정리하기) */
.contents {
    text-align: left;
}

/* 마진 병합현상->인접해있는 상하단 margin끼리 겹침 이것은 충분히 의도된 현상이다 예쁘다~~^^ 인지하는 것 만으로도 굉장히 멋있다. */
.section {
    background-color: white;
    margin: 30px;
    padding: 30px;
    background-image: url(./images/icon-information.png);
    background-repeat: no-repeat;
    background-position: right 40px center;
}

.section h2 {
    color: #ff6600;
    margin-bottom: 20px;
}

/* 같은 영역은 하나로 묶고 추가적인 요인 새로운 class만들어서 두마리 토끼를 다잡자! section2를 만드는 어리석은 행동은 자제하기 */
/* 우선순위 생각해서 background-image 속성을 바꾸는 .skill이 적용되는 위치 잘 생각할것! (selector가 얼마나 구체적으로 작성되었는지에 따라서 우선순위가 결정) ex) { 이.종찬 > .종찬 } */
.skills {
    background-image: url(./images/icon-skills.png);
}




.footer {
    background-color: #f4f4f4;
}


/* 다양하게 설명해주신 것들*/
/* width는 상속 지원 안됨 영향을 받아서 부모요소의 넓이만큼 가득 채워지는거지 width값을 가져오는것이 아님 , height는 상속 가능 */
/* :hover => pseudo class */
/* 우선순위 ex) body h1.wow{ background-color: brown;} < body h1.wow.wow.wow.wow{ background-color: brown; } 
=> 실제로 우선순위 적용됨 (급할때 친구 여러번 부르면 본다) */
/* <Cascading Style Sheet> : 위에서부터 아래로 각각의 코드가 합쳐져서 완성됨 폭포처럼~~ */
